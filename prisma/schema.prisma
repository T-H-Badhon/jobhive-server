// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String       @id @default(uuid())
  password           String
  email              String       @unique
  role               UserRoles    @default(APPLICANT)
  status             UserStatus   @default(ACTIVE)
  needPasswordChange Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  admin              Admin?
  moderator          Moderator?
  company            Company?
  interviewer        Interviewer?
  selector           Selector?
  applicant          Applicant?

  @@map("users")
}

model Admin {
  id               String   @id @default(uuid())
  name             String   @default("unknown")
  email            String   @unique
  contactNo        String
  profilePhoto     String?
  presentAddress   String
  permanentAddress String
  nid              String   @unique
  guardian         String
  guardianAddress  String
  isDeleted        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

model Moderator {
  id               String   @id @default(uuid())
  name             String   @default("unknown")
  email            String   @unique
  contactNo        String
  profilePhoto     String?
  presentAddress   String
  permanentAddress String
  nid              String   @unique
  guardian         String
  guardianAddress  String
  isDeleted        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("moderators")
}

model Company {
  id           String   @id @default(uuid())
  company      String   @default("unknown")
  email        String   @unique
  contactNo    String
  profilePhoto String?
  address      String
  isDeleted    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("companies")
}

model Interviewer {
  id               String   @id @default(uuid())
  name             String   @default("unknown")
  email            String   @unique
  contactNo        String
  profilePhoto     String?
  presentAddress   String
  permanentAddress String
  nid              String   @unique
  guardian         String
  guardianAddress  String
  isDeleted        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("interviewers")
}

model Selector {
  id               String   @id @default(uuid())
  name             String   @default("unknown")
  email            String   @unique
  contactNo        String
  profilePhoto     String?
  presentAddress   String
  permanentAddress String
  nid              String   @unique
  guardian         String
  guardianAddress  String
  isDeleted        Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("selectors")
}

model Applicant {
  id               String           @id @default(uuid())
  email            String           @unique
  name             String           @default("unknown")
  contactNo        String
  profilePhoto     String?
  married          Boolean
  address          String
  employmentStatus EmploymentStatus
  graduated        Boolean
  resumeLink       String?
  isDeleted        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  user                     User                       @relation(fields: [email], references: [email])
  educationalQualification EducationalQualification[]
  WorkExperience           WorkExperience[]
  project                  Project[]
  AppliedJob               AppliedJob[]

  @@map("applicants")
}

model EducationalQualification {
  id          String    @id @default(uuid())
  applicantId String
  degree      String
  institute   String
  passingYear String
  cGPA        Float
  scale       Int
  applicant   Applicant @relation(fields: [applicantId], references: [id])

  @@map("educationalQualifications")
}

model WorkExperience {
  id               String   @id @default(uuid())
  applicantId      String
  position         String
  company          String
  startDate        DateTime
  endDate          DateTime
  responsibilities String

  applicant Applicant @relation(fields: [applicantId], references: [id])

  @@map("workExperience")
}

model Project {
  id                  String                @id @default(uuid())
  applicantId         String
  applicant           Applicant             @relation(fields: [applicantId], references: [id])
  title               String
  demoLink            String
  sourceCode          String
  description         String
  projectTechnologies ProjectTechnologies[]
  features            Features[]

  @@map("project")
}

model Technology {
  id                  String                @id @default(uuid())
  name                String                @unique
  projectTechnologies ProjectTechnologies[]

  @@map("technology")
}

model Features {
  id        String  @id @default(uuid())
  feature   String
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  @@map("feature")
}

model ProjectTechnologies {
  projectId    String
  project      Project    @relation(fields: [projectId], references: [id])
  technologyId String
  technology   Technology @relation(fields: [technologyId], references: [id])

  @@id([projectId, technologyId])
  @@map("projectTechnologies")
}

model Job {
  id               String         @id @default(uuid())
  company          String
  position         String
  vacancy          Int
  location         String
  experience       Int            @default(0)
  deadline         DateTime
  salary           Int
  employmentType   EmploymentType
  requirement      String
  responsibilities String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  AppliedJob       AppliedJob[]
}

model AppliedJob {
  applicantId String
  applicant   Applicant @relation(fields: [applicantId], references: [id])

  jobId String
  job   Job    @relation(fields: [jobId], references: [id])

  isSelected Boolean @default(false)
  isHired    Boolean @default(false)

  @@id([applicantId, jobId])
}

//enums......................
enum UserRoles {
  SUPERADMIN
  ADMIN
  MODERATOR
  COMPANY // MOST OF THE TIME THE HR
  INTERVIEWER
  SELECTOR //SHORT LISTED RESUMES
  APPLICANT
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum EmploymentStatus {
  WORKING
  UNEMPLOYED
}

enum EmploymentType {
  FULL_TIME
  PART_TIME
  CONTRUCTUAL
}
